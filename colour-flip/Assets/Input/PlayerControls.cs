//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Default"",
            ""id"": ""6df8c0a9-3230-49d4-b622-cc25c7728aed"",
            ""actions"": [
                {
                    ""name"": ""LEFT"",
                    ""type"": ""Button"",
                    ""id"": ""ddcd949b-d1fb-4add-8023-f8e609254a5b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RIGHT"",
                    ""type"": ""Button"",
                    ""id"": ""e878341b-9c8a-4c50-aa80-a5d1bee3a477"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UP"",
                    ""type"": ""Button"",
                    ""id"": ""bde7bd78-f92e-4a58-b01d-dee047f93071"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DOWN"",
                    ""type"": ""Button"",
                    ""id"": ""079438dc-7377-4602-b659-01be3c2d317f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ROTATE_LEFT"",
                    ""type"": ""Button"",
                    ""id"": ""e450e260-d2f6-4a56-adcb-0a21059e83af"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ROTATE_RIGHT"",
                    ""type"": ""Button"",
                    ""id"": ""f4c29c6c-b5ca-4c82-affd-a5221911baa5"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RESET"",
                    ""type"": ""Button"",
                    ""id"": ""60ef52cc-c478-45d3-8c9e-5f98c5dbdf36"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NEXT"",
                    ""type"": ""Button"",
                    ""id"": ""7ae5153e-ed87-47df-b713-c5492a12f46e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b9d50d07-aed8-40e9-962d-7afb748c0955"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LEFT"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""be18ff05-855b-4309-a4ec-9d8e1c1a063a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RIGHT"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bd51007a-daa6-4858-9308-ea9f4e80d737"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UP"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e9db8c61-252c-40d8-84c1-1ee9a5d9a763"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DOWN"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""45a1da9d-9856-4ea6-871e-b076f92c823c"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ROTATE_LEFT"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e29efd2-eaa2-4913-8d3c-ac2036e75c80"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ROTATE_RIGHT"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""814078ea-3eaf-4ec5-a855-a4831d4681ce"",
                    ""path"": ""<Keyboard>/backspace"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RESET"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2b4f492d-9931-4641-af6d-797feb505c03"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NEXT"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Default
        m_Default = asset.FindActionMap("Default", throwIfNotFound: true);
        m_Default_LEFT = m_Default.FindAction("LEFT", throwIfNotFound: true);
        m_Default_RIGHT = m_Default.FindAction("RIGHT", throwIfNotFound: true);
        m_Default_UP = m_Default.FindAction("UP", throwIfNotFound: true);
        m_Default_DOWN = m_Default.FindAction("DOWN", throwIfNotFound: true);
        m_Default_ROTATE_LEFT = m_Default.FindAction("ROTATE_LEFT", throwIfNotFound: true);
        m_Default_ROTATE_RIGHT = m_Default.FindAction("ROTATE_RIGHT", throwIfNotFound: true);
        m_Default_RESET = m_Default.FindAction("RESET", throwIfNotFound: true);
        m_Default_NEXT = m_Default.FindAction("NEXT", throwIfNotFound: true);
    }

    ~@PlayerControls()
    {
        UnityEngine.Debug.Assert(!m_Default.enabled, "This will cause a leak and performance issues, PlayerControls.Default.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Default
    private readonly InputActionMap m_Default;
    private List<IDefaultActions> m_DefaultActionsCallbackInterfaces = new List<IDefaultActions>();
    private readonly InputAction m_Default_LEFT;
    private readonly InputAction m_Default_RIGHT;
    private readonly InputAction m_Default_UP;
    private readonly InputAction m_Default_DOWN;
    private readonly InputAction m_Default_ROTATE_LEFT;
    private readonly InputAction m_Default_ROTATE_RIGHT;
    private readonly InputAction m_Default_RESET;
    private readonly InputAction m_Default_NEXT;
    public struct DefaultActions
    {
        private @PlayerControls m_Wrapper;
        public DefaultActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @LEFT => m_Wrapper.m_Default_LEFT;
        public InputAction @RIGHT => m_Wrapper.m_Default_RIGHT;
        public InputAction @UP => m_Wrapper.m_Default_UP;
        public InputAction @DOWN => m_Wrapper.m_Default_DOWN;
        public InputAction @ROTATE_LEFT => m_Wrapper.m_Default_ROTATE_LEFT;
        public InputAction @ROTATE_RIGHT => m_Wrapper.m_Default_ROTATE_RIGHT;
        public InputAction @RESET => m_Wrapper.m_Default_RESET;
        public InputAction @NEXT => m_Wrapper.m_Default_NEXT;
        public InputActionMap Get() { return m_Wrapper.m_Default; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DefaultActions set) { return set.Get(); }
        public void AddCallbacks(IDefaultActions instance)
        {
            if (instance == null || m_Wrapper.m_DefaultActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DefaultActionsCallbackInterfaces.Add(instance);
            @LEFT.started += instance.OnLEFT;
            @LEFT.performed += instance.OnLEFT;
            @LEFT.canceled += instance.OnLEFT;
            @RIGHT.started += instance.OnRIGHT;
            @RIGHT.performed += instance.OnRIGHT;
            @RIGHT.canceled += instance.OnRIGHT;
            @UP.started += instance.OnUP;
            @UP.performed += instance.OnUP;
            @UP.canceled += instance.OnUP;
            @DOWN.started += instance.OnDOWN;
            @DOWN.performed += instance.OnDOWN;
            @DOWN.canceled += instance.OnDOWN;
            @ROTATE_LEFT.started += instance.OnROTATE_LEFT;
            @ROTATE_LEFT.performed += instance.OnROTATE_LEFT;
            @ROTATE_LEFT.canceled += instance.OnROTATE_LEFT;
            @ROTATE_RIGHT.started += instance.OnROTATE_RIGHT;
            @ROTATE_RIGHT.performed += instance.OnROTATE_RIGHT;
            @ROTATE_RIGHT.canceled += instance.OnROTATE_RIGHT;
            @RESET.started += instance.OnRESET;
            @RESET.performed += instance.OnRESET;
            @RESET.canceled += instance.OnRESET;
            @NEXT.started += instance.OnNEXT;
            @NEXT.performed += instance.OnNEXT;
            @NEXT.canceled += instance.OnNEXT;
        }

        private void UnregisterCallbacks(IDefaultActions instance)
        {
            @LEFT.started -= instance.OnLEFT;
            @LEFT.performed -= instance.OnLEFT;
            @LEFT.canceled -= instance.OnLEFT;
            @RIGHT.started -= instance.OnRIGHT;
            @RIGHT.performed -= instance.OnRIGHT;
            @RIGHT.canceled -= instance.OnRIGHT;
            @UP.started -= instance.OnUP;
            @UP.performed -= instance.OnUP;
            @UP.canceled -= instance.OnUP;
            @DOWN.started -= instance.OnDOWN;
            @DOWN.performed -= instance.OnDOWN;
            @DOWN.canceled -= instance.OnDOWN;
            @ROTATE_LEFT.started -= instance.OnROTATE_LEFT;
            @ROTATE_LEFT.performed -= instance.OnROTATE_LEFT;
            @ROTATE_LEFT.canceled -= instance.OnROTATE_LEFT;
            @ROTATE_RIGHT.started -= instance.OnROTATE_RIGHT;
            @ROTATE_RIGHT.performed -= instance.OnROTATE_RIGHT;
            @ROTATE_RIGHT.canceled -= instance.OnROTATE_RIGHT;
            @RESET.started -= instance.OnRESET;
            @RESET.performed -= instance.OnRESET;
            @RESET.canceled -= instance.OnRESET;
            @NEXT.started -= instance.OnNEXT;
            @NEXT.performed -= instance.OnNEXT;
            @NEXT.canceled -= instance.OnNEXT;
        }

        public void RemoveCallbacks(IDefaultActions instance)
        {
            if (m_Wrapper.m_DefaultActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDefaultActions instance)
        {
            foreach (var item in m_Wrapper.m_DefaultActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DefaultActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DefaultActions @Default => new DefaultActions(this);
    public interface IDefaultActions
    {
        void OnLEFT(InputAction.CallbackContext context);
        void OnRIGHT(InputAction.CallbackContext context);
        void OnUP(InputAction.CallbackContext context);
        void OnDOWN(InputAction.CallbackContext context);
        void OnROTATE_LEFT(InputAction.CallbackContext context);
        void OnROTATE_RIGHT(InputAction.CallbackContext context);
        void OnRESET(InputAction.CallbackContext context);
        void OnNEXT(InputAction.CallbackContext context);
    }
}
